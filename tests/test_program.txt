; Enhanced Test Program with Comprehensive Cache and Memory Operations
; Demonstrates: Memory operations, Cache interactions, Arithmetic, Bitwise operations,
; Shifts, Comparisons, Control flow, and Cache eviction patterns
; All operations follow proper load-operate-store pattern

; Test 1: Initialize memory with values first (simulating program data)
MOV [100] #42   ; Initialize Memory[100] with 42
MOV [104] #123  ; Initialize Memory[104] with 123
MOV [108] #255  ; Initialize Memory[108] with 255
MOV [112] #0    ; Initialize Memory[112] with 0
MOV [116] #16   ; Initialize Memory[116] with 16
MOV [120] #99   ; Initialize Memory[120] with 99

; Test 2: Load values from memory into registers for operations
LOAD eax [100]  ; Load 42 into eax
LOAD ebx [104]  ; Load 123 into ebx
LOAD ecx [108]  ; Load 255 into ecx
LOAD edx [112]  ; Load 0 into edx
LOAD esi [116]  ; Load 16 into esi
LOAD edi [120]  ; Load 99 into edi

; Verify initial loads
CMP eax #42    ; Verify eax = 42
CMP ebx #123   ; Verify ebx = 123
CMP ecx #255   ; Verify ecx = 255
CMP edx #0     ; Verify edx = 0
CMP esi #16    ; Verify esi = 16
CMP edi #99    ; Verify edi = 99

; Test 3: Shift Operations (using load-operate-store)
LOAD eax [100]  ; Load value from Memory[100]
SHL eax #2      ; Shift left by 2 (42 -> 168)
MOV [100] eax   ; Store result back to Memory[100]
LOAD ebx [100]  ; Load to verify
CMP ebx #168    ; Verify Memory[100] = 168

LOAD eax [104]  ; Load value from Memory[104]
SHR eax #1      ; Shift right by 1 (123 -> 61)
MOV [104] eax   ; Store result back to Memory[104]
LOAD ebx [104]  ; Load to verify
CMP ebx #61     ; Verify Memory[104] = 61

; Test 4: Arithmetic Operations (using load-operate-store)
LOAD eax [108]  ; Load from Memory[108]
ADD eax #10     ; Add 10 (255 -> 265)
MOV [108] eax   ; Store result back
LOAD ebx [108]  ; Load to verify
CMP ebx #265    ; Verify Memory[108] = 265

LOAD eax [112]  ; Load from Memory[112]
SUB eax #5      ; Subtract 5 (0 -> -5)
MOV [112] eax   ; Store result back
LOAD ebx [112]  ; Load to verify
CMP ebx #-5     ; Verify Memory[112] = -5

; Test 5: Bitwise Operations (using load-operate-store)
LOAD eax [116]  ; Load from Memory[116]
AND eax #240    ; AND with 240 (16 & 240 = 16)
MOV [116] eax   ; Store result back
LOAD ebx [116]  ; Load to verify
CMP ebx #16     ; Verify Memory[116] = 16

LOAD eax [120]  ; Load from Memory[120]
OR eax #15      ; OR with 15 (99 | 15 = 111)
MOV [120] eax   ; Store result back
LOAD ebx [120]  ; Load to verify
CMP ebx #111    ; Verify Memory[120] = 111

; Test 6: Cache Eviction Pattern Test
MOV [124] #200  ; Store new value
LOAD eax [124]  ; Load to verify
CMP eax #200    ; Verify Memory[124] = 200

; Test 7: Memory Consistency After Eviction
LOAD eax [100]  ; Load from potentially evicted address
CMP eax #168    ; Verify Memory[100] still = 168

; Test 8: Cache Line Boundary Test
MOV [128] #300  ; Store to new address
MOV [132] #400  ; Store to next address
MOV [136] #500  ; Store to next address

LOAD eax [128]  ; Load and verify sequence
CMP eax #300    ; Verify Memory[128] = 300
LOAD eax [132]  ; Load next
CMP eax #400    ; Verify Memory[132] = 400
LOAD eax [136]  ; Load next
CMP eax #500    ; Verify Memory[136] = 500

; Test 9: Control Flow with Cache
MOV eax #3      ; Set loop counter
LOOP_START:
    LOAD ebx [100]  ; Load within loop to test cache
    DEC eax         ; Decrement counter
    CMP eax #0      ; Check if done
    JNZ LOOP_START  ; Repeat if not zero

; Test 10: Final Cache Set Test
MOV [140] #600   ; Store new values
MOV [144] #700
MOV [148] #800
MOV [152] #900

; Verify final values with proper loads
LOAD eax [140]
CMP eax #600
LOAD eax [144]
CMP eax #700
LOAD eax [148]
CMP eax #800
LOAD eax [152]
CMP eax #900

; Final verification of all modified values
LOAD eax [100]   ; Verify all previous operations
CMP eax #168     ; Should be 168 (after shift)
LOAD eax [104]
CMP eax #61      ; Should be 61 (after shift)
LOAD eax [108]
CMP eax #265     ; Should be 265 (after add)
LOAD eax [112]
CMP eax #-5      ; Should be -5 (after subtract)
LOAD eax [116]
CMP eax #16      ; Should be 16 (after AND)
LOAD eax [120]
CMP eax #111     ; Should be 111 (after OR)
